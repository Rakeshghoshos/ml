# -*- coding: utf-8 -*-
"""kmeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11SawrpYk659hLL-jgnF7PWvN4peDvSZY
"""

import pandas as pd
import numpy as np
from sklearn.datasets import make_blobs
import matplotlib.pyplot as plt
import random

X,y = make_blobs(n_samples=1000,n_features=2,)

x1=X[:,0]
x2=X[:,1]
plt.scatter(x1,x2,c=y)

class kmeans():
  def __init__(self,iter=100,cluster=3):
    self.iter=iter
    self.cluster = cluster
    self.centroids = None

  def fit_predict(self,X):
    index = random.sample(range(0,X.shape[0]),self.cluster)
    self.centroids = X[index]
    for i in range(self.iter):
      cluster_group = self.clusters(X)
      old_centroids = self.centroids
      self.centroids = self.move_centroids(X,cluster_group)
      if(old_centroids == self.centroids).all():
        break
    return cluster_group

  def clusters(self,X):
    distances = []
    cluster_group = []
    for row in X:
      for centroid in self.centroids:
        distances.append(np.sqrt(np.dot(row-centroid,row-centroid)))
      min_dist = min(distances)
      index = distances.index(min_dist)
      cluster_group.append(index)
      distances.clear()
    return cluster_group

  def move_centroids(self,X,cluster_group):
    type = np.unique(cluster_group)
    centroids = []
    for i in type:
      centroids.append(X[cluster_group == i].mean(axis=0))
    return np.array(centroids)

km = kmeans()
y_means = km.fit_predict(X)

y_means = np.array(y_means)
plt.scatter(X[y_means == 0,0],X[y_means == 0,1],color='red')
plt.scatter(X[y_means ==1,0],X[y_means == 1,1],color='blue')
plt.scatter(X[y_means == 2,0],X[y_means == 2,1],color='green')