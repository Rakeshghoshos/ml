# -*- coding: utf-8 -*-
"""gradient_decent.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zi_3SJlUWDRvh6K8EIlzQmBK2eVOALpF

linear regression using gradient decent
"""

import numpy as np
import pandas as pd
from sklearn.datasets import make_regression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
from sklearn.linear_model import SGDRegressor

X,y = make_regression(n_features=3,n_samples=1000)

i = [i for i in range(1000)]
df = pd.DataFrame(X,y,columns=['x','y','target'])
df.index = i

df.sample(5)

df.info()

X_train,X_test,y_train,y_test = train_test_split(df.drop(['target'],axis=1),df['target'])

class sgdregressor:
  def __init__(self,lr=0.1,epochs=100):
    self.intercept = None
    self.coef = None
    self.lr = lr
    self.epochs = epochs
  def fit(self,X_train,y_train):
    self.intercept = 0
    self.coef = np.ones(X_train.shape[1])
    for i in range(self.epochs):
      yp = np.dot(X_train,self.coef) + self.intercept

      inter_d = -2 * np.mean((y_train - yp))
      self.intercept = self.intercept - self.lr*inter_d

      coef_d = -2 * np.dot((y_train-yp),X_train)/X_train.shape[0]
      self.coef = self.coef - self.lr*coef_d

    print(self.intercept,self.coef)

  def predict(self,X_test):
    yp = np.dot(X_test,self.coef)*self.intercept
    return yp

sgd = sgdregressor()
sgd.fit(X_train,y_train)

y_pred = sgd.predict(X_test)

r2_score(y_test,y_pred)

s = SGDRegressor()

s.fit(X_train,y_train)
print(s.intercept_,s.coef_)

y_pred_in = s.predict(X_test)

r2_score(y_test,y_pred_in)