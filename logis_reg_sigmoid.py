# -*- coding: utf-8 -*-
"""logis_reg_sigmoid.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11CDZlw0wrtBGAc5peUJZ-n3O9CMwTIXg

logistic with sigmoid
"""

import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.datasets import make_classification
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression

X,y = make_classification(n_samples=1000,n_features=2,n_classes=2,n_informative=2,n_redundant=0,random_state=42)

y.shape

x1 = X[:,0]
x2 = X[:,1]
plt.scatter(x1,x2,c=y)

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2)

log_reg = LogisticRegression()
log_reg.fit(X_train,y_train)

print(log_reg.coef_,log_reg.intercept_)

def sigmoid(z):
  return 1/(1+np.exp(-z))

class logistic_regression():
  def __init__(self,lr=0.5,epochs=1000):
    self.w = 0
    self.lr = lr
    self.epochs = epochs

  def fit(self,X_train,y_train):
    X = np.insert(X_train,0,1,axis=1)
    self.w = np.ones(X.shape[1])

    for i in range(self.epochs):
      y_hat = sigmoid(np.dot(X,self.w))
      self.w = self.w + self.lr *(np.dot((y_train-y_hat),X)/X.shape[0])

    return self.w[1:],self.w[0]
    # return self.w,X

lr = logistic_regression()
coef,intercept = lr.fit(X_train,y_train)
print(coef,intercept)

m_lr = -(coef[0]/coef[1])
b_lr = -(intercept/coef[1])

m_log_reg = -(log_reg.coef_[0][0]/log_reg.coef_[0][1])
b_log_reg = -(log_reg.intercept_/log_reg.coef_[0][1])

x_lr = np.linspace(-3,3,1000)
y_lr = m_lr*x_lr + b_lr

x_log_reg = np.linspace(-3,3,1000)
y_log_reg = m_log_reg*x_log_reg + b_log_reg

plt.plot(x_lr,y_lr,c='r')
plt.plot(x_log_reg,y_log_reg,c='b')
x1 = X_train[:,0]
x2 = X_train[:,1]
plt.scatter(x1,x2,c=y_train)

"""lr is an object of self created class
log_reg is an object of sklearn class
"""